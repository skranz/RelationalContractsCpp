// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_capped_rne_find_actions
IntegerVector cpp_capped_rne_find_actions(double U, double v1, double v2, NumericVector U_hat, NumericVector v1_hat, NumericVector v2_hat, LogicalVector IC_holds, NumericVector next_r1, NumericVector next_r2, NumericMatrix trans_mat, IntegerVector dest_rows, String tie_breaking, double tol);
RcppExport SEXP _RelationalContractsCpp_cpp_capped_rne_find_actions(SEXP USEXP, SEXP v1SEXP, SEXP v2SEXP, SEXP U_hatSEXP, SEXP v1_hatSEXP, SEXP v2_hatSEXP, SEXP IC_holdsSEXP, SEXP next_r1SEXP, SEXP next_r2SEXP, SEXP trans_matSEXP, SEXP dest_rowsSEXP, SEXP tie_breakingSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type U_hat(U_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v1_hat(v1_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2_hat(v2_hatSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type IC_holds(IC_holdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type next_r1(next_r1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type next_r2(next_r2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans_mat(trans_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dest_rows(dest_rowsSEXP);
    Rcpp::traits::input_parameter< String >::type tie_breaking(tie_breakingSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_capped_rne_find_actions(U, v1, v2, U_hat, v1_hat, v2_hat, IC_holds, next_r1, next_r2, trans_mat, dest_rows, tie_breaking, tol));
    return rcpp_result_gen;
END_RCPP
}
// cpp_capped_rne_iterations
DataFrame cpp_capped_rne_iterations(int T, DataFrame sdf, DataFrame rne, List transmats, double delta, double rho, double beta1, String tie_breaking, double tol, int debug_row);
RcppExport SEXP _RelationalContractsCpp_cpp_capped_rne_iterations(SEXP TSEXP, SEXP sdfSEXP, SEXP rneSEXP, SEXP transmatsSEXP, SEXP deltaSEXP, SEXP rhoSEXP, SEXP beta1SEXP, SEXP tie_breakingSEXP, SEXP tolSEXP, SEXP debug_rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type sdf(sdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type rne(rneSEXP);
    Rcpp::traits::input_parameter< List >::type transmats(transmatsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< String >::type tie_breaking(tie_breakingSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type debug_row(debug_rowSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_capped_rne_iterations(T, sdf, rne, transmats, delta, rho, beta1, tie_breaking, tol, debug_row));
    return rcpp_result_gen;
END_RCPP
}
// cpp_capped_rne_multistage_iterations
DataFrame cpp_capped_rne_multistage_iterations(int T, DataFrame sdf, DataFrame rne, List transmats, List static_rep_li, double delta, double rho, double beta1, String tie_breaking, double tol, int debug_row);
RcppExport SEXP _RelationalContractsCpp_cpp_capped_rne_multistage_iterations(SEXP TSEXP, SEXP sdfSEXP, SEXP rneSEXP, SEXP transmatsSEXP, SEXP static_rep_liSEXP, SEXP deltaSEXP, SEXP rhoSEXP, SEXP beta1SEXP, SEXP tie_breakingSEXP, SEXP tolSEXP, SEXP debug_rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type sdf(sdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type rne(rneSEXP);
    Rcpp::traits::input_parameter< List >::type transmats(transmatsSEXP);
    Rcpp::traits::input_parameter< List >::type static_rep_li(static_rep_liSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< String >::type tie_breaking(tie_breakingSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type debug_row(debug_rowSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_capped_rne_multistage_iterations(T, sdf, rne, transmats, static_rep_li, delta, rho, beta1, tie_breaking, tol, debug_row));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RelationalContractsCpp_cpp_capped_rne_find_actions", (DL_FUNC) &_RelationalContractsCpp_cpp_capped_rne_find_actions, 13},
    {"_RelationalContractsCpp_cpp_capped_rne_iterations", (DL_FUNC) &_RelationalContractsCpp_cpp_capped_rne_iterations, 10},
    {"_RelationalContractsCpp_cpp_capped_rne_multistage_iterations", (DL_FUNC) &_RelationalContractsCpp_cpp_capped_rne_multistage_iterations, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_RelationalContractsCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
